pragma solidity >=0.5.0 <0.6.0;
import "./ownable.sol";

contract BSauction is Ownable{
    
    event auctionCreated(uint id, uint payout, uint64 endDate);
    event subAuctionCreated(uint id, uint auctionId, address creator);
    
    uint minProfit = 1;
    
    struct Auction{
        uint totalWei;
        uint maxWei;
        uint payoutWei;
        uint64 endDate;
        bool completed;
    }
    
    struct subAuction{
        uint auctionId;
        uint currentWei;
        address payable owner;
    }
    
    Auction[] public auctions;
    subAuction[] public subAuctions;
    
    mapping (uint => address payable) auctionToWinner;
    
    function createAuction(uint payout, uint64 endDate) public onlyOwner{
        uint id = auctions.push(Auction(0,0,payout,endDate,false)) - 1;
        emit auctionCreated(id, payout, endDate);
    }
    
    function payAuction(uint auctionId) public payable {
        require(auctions[auctionId].completed == false);
        require(auctions[auctionId].endDate >= now);
        uint id = subAuctions.push(subAuction(auctionId,msg.value,msg.sender)) - 1;
        auctions[auctionId].totalWei += msg.value;
        if(msg.value > auctions[auctionId].maxWei){
            auctions[auctionId].maxWei = msg.value;
            auctionToWinner[auctionId] = msg.sender;
        }
        emit subAuctionCreated(id, auctionId, msg.sender);
    }
    
    function payAuctionMore(uint subAuctionId) public payable{
        require(auctions[subAuctions[subAuctionId].auctionId].completed == false);
        require(auctions[subAuctions[subAuctionId].auctionId].endDate >= now);
        require(subAuctions[subAuctionId].owner == msg.sender);
        subAuctions[subAuctionId].currentWei += msg.value;
        auctions[subAuctions[subAuctionId].auctionId].totalWei += msg.value;
        if(subAuctions[subAuctionId].currentWei > auctions[subAuctions[subAuctionId].auctionId].maxWei){
            auctions[subAuctions[subAuctionId].auctionId].maxWei = subAuctions[subAuctionId].currentWei;
            auctionToWinner[subAuctions[subAuctionId].auctionId] = msg.sender;
        }
    }
    
    function extendAuctionLife(uint id, uint64 endDate) public{
        require(auctions[id].completed == false);
        require(auctions[id].totalWei < auctions[id].payoutWei + minProfit);
        require(auctions[id].endDate < now);
        auctions[id].endDate = endDate;
    }
    
    function payout(uint auctionId) public{
        require(auctions[auctionId].completed == false);
        require(auctions[auctionId].endDate < now);
        require(auctions[auctionId].totalWei >= auctions[auctionId].payoutWei + minProfit);
        auctionToWinner[auctionId].transfer(auctions[auctionId].payoutWei);
        auctions[auctionId].completed = true;
    }
    
    function viewMax(uint auctionId) external view returns(uint){
        return auctions[auctionId].maxWei;
    }
    
    function viewPaid(uint subAuctionId) external view returns(uint){
        return subAuctions[subAuctionId].currentWei;
    }
    
    function withdrawl() public onlyOwner{
        bool active = false;
        for(uint i = 0; i <= auctions.length; i++){
            if(auctions[i].completed == false){
                active = true;
            }
        }
        if(active == false){
            address payable _owner = owner();
            _owner.transfer(address(this).balance);
        }
    }
}
